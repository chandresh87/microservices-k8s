buildscript {
	ext {
		springBootVersion = '2.1.7.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'se.transmode.gradle:gradle-docker:1.2'
	}
}

plugins {
	id 'net.ltgt.apt' version '0.10'
	id 'io.spring.dependency-management' version '1.0.7.RELEASE'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'


group = 'microservice-k8s'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "Greenwich.SR2")
}



compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor

    // if you need to configure mapstruct component model
    options.compilerArgs << "-Amapstruct.defaultComponentModel=spring" 
    options.setAnnotationProcessorGeneratedSourcesDirectory( file("${buildDir}/generated/source/apt/main"))
}


configurations {
   compile.exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
}

dependencies {

	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	
	compile "org.springframework.boot:spring-boot-starter-actuator"
	
	//feign// changed to open feign
	compile('org.springframework.cloud:spring-cloud-starter-openfeign')
	
	//Hystrix
	compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
	compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard')
	
		
	//Mysql
	runtime('mysql:mysql-connector-java')
	compile 'org.hibernate:hibernate-core:5.2.10.Final'
	compile 'com.zaxxer:HikariCP'
	
	//MapStruct
     annotationProcessor  group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.3.0.Final'
     implementation "org.mapstruct:mapstruct:1.3.0.Final"
	
	//JMS
	compile 'org.springframework.cloud:spring-cloud-stream'
	compile 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
	compile 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
	
	//RIBBON
	compile('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')
	// spring Retry 
	 compile 'org.springframework.retry:spring-retry'
	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	//OAuth 2
	compile('org.springframework.cloud:spring-cloud-starter-oauth2')
	compile "org.springframework.security:spring-security-jwt"
	compile "org.springframework.cloud:spring-cloud-security"
	

	compile group: 'commons-io', name: 'commons-io', version: '2.6'

	//Sleuth
	//compile "org.springframework.cloud:spring-cloud-starter-sleuth"
	//zipkin
	compile 'org.springframework.cloud:spring-cloud-starter-zipkin'

	//Redis   
	compile "org.springframework.data:spring-data-redis"
	compile "redis.clients:jedis:2.9.0"
	compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.7.0'

	//chaos-monkey
	//compile "de.codecentric:chaos-monkey-spring-boot:2.1.1"
	
	//Kubernetes
	compile "org.springframework.cloud:spring-cloud-starter-kubernetes-all"
	
	//Prometheus, allows to publish metrics in Prometheus format ,,,
	compile "io.prometheus:simpleclient:0.8.0"
	// Spring Boot Metrics collector and management
	compile "io.micrometer:micrometer-registry-prometheus:1.3.1"

}

docker {
    maintainer = 'chandresh.mishra <chandresh87@gmail.com>'
    
}

task buildDocker(type: Docker, dependsOn: build) {
  //push = true
  applicationName = 'personmicroservice-k8s'
  tagVersion = '1.0'
  dockerfile = file("${buildDir}/docker/Dockerfile")
  doFirst {
    copy {
      from jar
      into stageDir
      from "src/main/docker/"
      into "${buildDir}/docker"
    }
  }
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

